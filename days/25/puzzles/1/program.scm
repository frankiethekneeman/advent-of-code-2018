(define readPoint (lambda ()
    (let ((first (read)))
        (if (eof-object? first)
            '()
            (list
                first
                (car (reverse (list (read-char) (read))))
                (car (reverse (list (read-char) (read))))
                (car (reverse (list (read-char) (read))))
            )
        )
    )
))
(define readPoints (lambda()
    (let ((pt (readPoint)))
        (if (not (null? pt))
            (cons pt (readPoints))
            '()
        )
    )
))
(define fold (lambda(fn init lst)
    (if (not (null? lst))
        (fold fn (fn init (car lst)) (cdr lst))
        init
    )
))
(define filter (lambda(fn lst)
    (if (not (null? lst))
        (if (fn (car lst))
            (cons (car lst) (filter fn (cdr lst)))
            (filter fn (cdr lst))
        )
        '()
    )
))
(define partition (lambda(fn lst)
    (list
        (filter fn lst)
        (filter (lambda(el) (not (fn el))) lst)
    )
))
(define take (lambda(ct lst)
    (if (or (= ct 0) (null? lst))
        '()
        (cons (car lst) (take (- ct 1) (cdr lst)))
    )
))
(define drop (lambda(ct lst)
    (if (or (= ct 0) (null? lst))
        lst
        (drop (- ct 1) (cdr lst))
    )
))

(define any (lambda(fn lst)
    (if (not (null? lst))
        (or (fn (car lst)) (any fn (cdr lst)))
        #f
    )
))
(define dist (lambda(p1 p2)
    (fold + 0 (map abs (map - p1 p2)))
))
(define linked (lambda(p1 p2)
    (<= (dist p1 p2) 3)
))
(define getLinked (lambda(pt pts)
    (partition (lambda(p) (linked pt p)) pts)
))
(define getLinkedList (lambda(in toCheck)
    (partition (lambda (p1)
        (any (lambda (p2) (linked p1 p2)) in)
    ) toCheck)
))
(define getConstellation(lambda(in rest) 
    (let* ((gotten (getLinkedList in rest))
            (newIn (list-ref gotten 0))
            (newRest (list-ref gotten 1))
            )
        (if (null? newIn)
            (list in rest)
            (let* ((constellation (getConstellation newIn newRest))
                    (fIn (list-ref constellation 0))
                    (fRest (list-ref constellation 1))
                    )
                (list (append in fIn) fRest)
            )
        )
    )
))
(define getConstellations (lambda(pts)
    (if (null? pts)
        '()
        (let* ((ret (getConstellation (take 1 pts) (drop 1 pts)))
                (const (list-ref ret 0))
                (rest (list-ref ret 1))
                )
            (cons const (getConstellations rest))
        )
    )
))

(define pts (readPoints))
(display (length (getConstellations pts)))
(newline)
